---
# Source: drupal/charts/mariadb/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: mysite-mariadb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 11.4.4
    helm.sh/chart: mariadb-20.2.1
    app.kubernetes.io/part-of: mariadb
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: mysite
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/version: 11.4.4
      helm.sh/chart: mariadb-20.2.1
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 3306
        - port: 3306
---
# Source: drupal/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: mysite-drupal
  namespace: "default"
  labels:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: drupal
    app.kubernetes.io/version: 11.1.0
    helm.sh/chart: drupal-21.1.1
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: mysite
      app.kubernetes.io/name: drupal
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 8443
---
# Source: drupal/charts/mariadb/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mysite-mariadb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 11.4.4
    helm.sh/chart: mariadb-20.2.1
    app.kubernetes.io/part-of: mariadb
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: mysite
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/component: primary
---
# Source: drupal/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mysite-drupal
  namespace: "default"
  labels:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: drupal
    app.kubernetes.io/version: 11.1.0
    helm.sh/chart: drupal-21.1.1
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: mysite
      app.kubernetes.io/name: drupal
---
# Source: drupal/charts/mariadb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mysite-mariadb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 11.4.4
    helm.sh/chart: mariadb-20.2.1
    app.kubernetes.io/part-of: mariadb
automountServiceAccountToken: false
---
# Source: drupal/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mysite-drupal
  namespace: "default"
  labels:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: drupal
    app.kubernetes.io/version: 11.1.0
    helm.sh/chart: drupal-21.1.1
automountServiceAccountToken: false
---
# Source: drupal/charts/mariadb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysite-mariadb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 11.4.4
    helm.sh/chart: mariadb-20.2.1
    app.kubernetes.io/part-of: mariadb
type: Opaque
data:
  mariadb-root-password: "Q1gybFpQWDZkSA=="
  mariadb-password: "MG5sREE5M1pGMQ=="
---
# Source: drupal/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysite-drupal
  namespace: "default"
  labels:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: drupal
    app.kubernetes.io/version: 11.1.0
    helm.sh/chart: drupal-21.1.1
type: Opaque
data:
  drupal-password: "dFIzNU9VekdRWQ=="
---
# Source: drupal/charts/mariadb/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysite-mariadb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 11.4.4
    helm.sh/chart: mariadb-20.2.1
    app.kubernetes.io/part-of: mariadb
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mariadb
    datadir=/bitnami/mariadb/data
    plugin_dir=/opt/bitnami/mariadb/plugin
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    tmpdir=/opt/bitnami/mariadb/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    log-error=/opt/bitnami/mariadb/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    long_query_time=10.0
    binlog_expire_logs_seconds=2592000
    [client]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mariadb/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
---
# Source: drupal/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mysite-drupal-drupal
  namespace: "default"
  labels:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: drupal
    app.kubernetes.io/version: 11.1.0
    helm.sh/chart: drupal-21.1.1
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: drupal/charts/mariadb/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysite-mariadb-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 11.4.4
    helm.sh/chart: mariadb-20.2.1
    app.kubernetes.io/part-of: mariadb
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  clusterIP: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
  selector:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/part-of: mariadb
---
# Source: drupal/charts/mariadb/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysite-mariadb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 11.4.4
    helm.sh/chart: mariadb-20.2.1
    app.kubernetes.io/part-of: mariadb
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/component: primary
---
# Source: drupal/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysite-drupal
  namespace: "default"
  labels:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: drupal
    app.kubernetes.io/version: 11.1.0
    helm.sh/chart: drupal-21.1.1
spec:
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: "Cluster"
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: https
      port: 443
      targetPort: https
  selector:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/name: drupal
---
# Source: drupal/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysite-drupal
  namespace: "default"
  labels:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: drupal
    app.kubernetes.io/version: 11.1.0
    helm.sh/chart: drupal-21.1.1
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: mysite
      app.kubernetes.io/name: drupal
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: mysite
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: drupal
        app.kubernetes.io/version: 11.1.0
        helm.sh/chart: drupal-21.1.1
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: mysite
                    app.kubernetes.io/name: drupal
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      serviceAccountName: mysite-drupal
      priorityClassName: ""
      automountServiceAccountToken: false
      # yamllint disable rule:indentation
      hostAliases:
        - hostnames:
          - status.localhost
          ip: 127.0.0.1
      # yamllint enable rule:indentation
      initContainers:
        - name: prepare-base-dir
          image: docker.io/bitnami/drupal:11.1.0-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 2Gi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              . /opt/bitnami/scripts/liblog.sh
              . /opt/bitnami/scripts/libfs.sh

              info "Copying base dir to empty dir"
              # In order to not break the application functionality (such as upgrades or plugins) we need
              # to make the base directory writable, so we need to copy it to an empty dir volume
              cp -r --preserve=mode /opt/bitnami/drupal /emptydir/app-base-dir

              info "Copying symlinks to stdout/stderr"
              # We copy the logs folder because it has symlinks to stdout and stderr
              if ! is_dir_empty /opt/bitnami/apache/logs; then
                cp -r /opt/bitnami/apache/logs /emptydir/apache-logs-dir
              fi
              info "Copy operation completed"
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
      containers:
        - name: mysite-drupal
          image: docker.io/bitnami/drupal:11.1.0-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: APACHE_HTTP_PORT_NUMBER
              value: "8080"
            - name: APACHE_HTTPS_PORT_NUMBER
              value: "8443"
            - name: DRUPAL_DATABASE_HOST
              value: "mysite-mariadb"
            - name: DRUPAL_DATABASE_PORT_NUMBER
              value: "3306"
            - name: DRUPAL_DATABASE_NAME
              value: "bitnami_drupal"
            - name: DRUPAL_DATABASE_USER
              value: "bn_drupal"
            - name: DRUPAL_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysite-mariadb
                  key: "mariadb-password"
            - name: DRUPAL_SKIP_BOOTSTRAP
              value: "no"
            - name: DRUPAL_PROFILE
              value: "standard"
            - name: DRUPAL_USERNAME
              value: "user"
            - name: DRUPAL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysite-drupal
                  key: drupal-password
            - name: DRUPAL_EMAIL
              value: "user@example.com"
          envFrom:
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 600
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /user/login
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 2Gi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /opt/bitnami/apache/conf
              subPath: apache-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/apache/logs
              subPath: apache-logs-dir
            - name: empty-dir
              mountPath: /opt/bitnami/apache/var/run
              subPath: apache-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/php/etc
              subPath: php-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/php/tmp
              subPath: php-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/php/var
              subPath: php-var-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/drupal
              subPath: app-base-dir
            - name: drupal-data
              mountPath: /bitnami/drupal
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: drupal-data
          persistentVolumeClaim:
            claimName: mysite-drupal-drupal
---
# Source: drupal/charts/mariadb/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysite-mariadb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: mysite
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 11.4.4
    helm.sh/chart: mariadb-20.2.1
    app.kubernetes.io/part-of: mariadb
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: mysite
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/part-of: mariadb
      app.kubernetes.io/component: primary
  serviceName: mysite-mariadb-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: ea615b446e9772e27221c7cc6068c45e90f88f5a3eabcb2b41b4d892b3560037
      labels:
        app.kubernetes.io/instance: mysite
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mariadb
        app.kubernetes.io/version: 11.4.4
        helm.sh/chart: mariadb-20.2.1
        app.kubernetes.io/part-of: mariadb
        app.kubernetes.io/component: primary
    spec:
      
      automountServiceAccountToken: false
      serviceAccountName: mysite-mariadb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: mysite
                    app.kubernetes.io/name: mariadb
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: preserve-logs-symlinks
          image: docker.io/bitnami/mariadb:11.4.4-debian-12-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 2Gi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              . /opt/bitnami/scripts/libfs.sh
              # We copy the logs folder because it has symlinks to stdout and stderr
              if ! is_dir_empty /opt/bitnami/mariadb/logs; then
                cp -r /opt/bitnami/mariadb/logs /emptydir/app-logs-dir
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
      containers:
        - name: mariadb
          image: docker.io/bitnami/mariadb:11.4.4-debian-12-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysite-mariadb
                  key: mariadb-root-password
            - name: MARIADB_USER
              value: "bn_drupal"
            - name: MARIADB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysite-mariadb
                  key: mariadb-password
            - name: MARIADB_DATABASE
              value: "bitnami_drupal"
            - name: MARIADB_ENABLE_SSL
              value: "no"
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  mariadb-admin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  mariadb-admin ping -uroot -p"${password_aux}"
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 2Gi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/mariadb
            - name: config
              mountPath: /opt/bitnami/mariadb/conf/my.cnf
              subPath: my.cnf
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mariadb/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mariadb/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mariadb/logs
              subPath: app-logs-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: config
          configMap:
            name: mysite-mariadb
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/instance: mysite
          app.kubernetes.io/name: mariadb
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
